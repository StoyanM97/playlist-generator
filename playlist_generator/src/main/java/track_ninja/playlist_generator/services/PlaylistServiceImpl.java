package track_ninja.playlist_generator.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import track_ninja.playlist_generator.exceptions.GenreDoesNotExistException;
import track_ninja.playlist_generator.exceptions.UserNotFoundException;
import track_ninja.playlist_generator.models.Playlist;
import track_ninja.playlist_generator.exceptions.NoGeneratedPlaylistsException;
import track_ninja.playlist_generator.repositories.GenreRepository;
import track_ninja.playlist_generator.repositories.PlaylistRepository;
import track_ninja.playlist_generator.repositories.UserRepository;

import java.util.List;


@Service
public class PlaylistServiceImpl implements PlaylistService{
    private static final String NO_PLAYLISTS_GENERATED_ERROR_MESSAGE = "No playlists generated!";
    private static final String NO_PLAYLISTS_GENERATED_BY_THIS_USER_ERROR_MESSAGE = "No playlists generated by this user!";
    private static final String NO_PLAYLISTS_GENERATED_WITH_SUCH_TITLE_ERROR_MESSAGE = "No playlists generated with such title!";
    private static final String NO_PLAYLISTS_GENERATED_FOR_THIS_GENRE_ERROR_MESSAGE = "No playlists generated for this genre!";
    private static final String NO_PLAYLISTS_WITH_DURATION_WITHIN_THIS_RANGE_ERROR_MESSAGE = "No playlists with duration within this range!";

    private PlaylistRepository playlistRepository;
    private GenreRepository genreRepository;
    private UserRepository userRepository;

    @Autowired
    public PlaylistServiceImpl(PlaylistRepository playlistRepository, GenreRepository genreRepository, UserRepository userRepository) {
        this.playlistRepository = playlistRepository;
        this.genreRepository = genreRepository;
        this.userRepository = userRepository;
    }


    @Override
    public List<Playlist> getAll() {
        List<Playlist> playlists = playlistRepository.findAllByIsDeletedFalse();
        if (playlists.isEmpty()) {
            throw new NoGeneratedPlaylistsException(NO_PLAYLISTS_GENERATED_ERROR_MESSAGE);
        }
        return playlists;
    }

    @Override
    public List<Playlist> getByGenre(String genre) {
        if (!genreRepository.existsByName(genre)) {
            throw new GenreDoesNotExistException();
        }
        List<Playlist> playlists = playlistRepository.findPlaylistsByIsDeletedFalseAndGenresContaining_Name(genre);
        if (playlists.isEmpty()) {
            throw new NoGeneratedPlaylistsException(NO_PLAYLISTS_GENERATED_FOR_THIS_GENRE_ERROR_MESSAGE);
        }
        return playlists;
    }

    @Override
    public List<Playlist> getByUser(String username) {
        if (userRepository.existsByUsername(username)) {
            throw new UserNotFoundException();
        }
        List<Playlist> playlists = playlistRepository.findAllByIsDeletedFalseAndUser_User_Username(username);
        if (playlists.isEmpty()) {
            throw new NoGeneratedPlaylistsException(NO_PLAYLISTS_GENERATED_BY_THIS_USER_ERROR_MESSAGE);
        }
        return playlists;
    }

    @Override
    public List<Playlist> getByTitle(String title) {
        List<Playlist> playlists = playlistRepository.findAllByIsDeletedFalseAndTitle(title);
        if (playlists.isEmpty()) {
            throw new NoGeneratedPlaylistsException(NO_PLAYLISTS_GENERATED_WITH_SUCH_TITLE_ERROR_MESSAGE);
        }
        return playlists;
    }

    @Override
    public List<Playlist> getByDurationBetween(long minDurationMinutes, long maxDurationMinutes) {
        List<Playlist> playlists = playlistRepository.findAllByDurationBetween(minDurationMinutes * 60, maxDurationMinutes * 60);
        if (playlists.isEmpty()) {
            throw new NoGeneratedPlaylistsException(NO_PLAYLISTS_WITH_DURATION_WITHIN_THIS_RANGE_ERROR_MESSAGE);
        }
        return playlists;
    }
}
